import telebot
import requests
import schedule
import time
import threading
import datetime
import openai

# üîê OpenAI API –∫–ª—é—á
openai.api_key = "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"

# üîê Telegram —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot("7951673327:AAFTj5v_thFiBSAkYWlUi3Wq6TMVAp_CmKE")

# üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å CoinGecko
def get_price(symbol):
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={symbol}&vs_currencies=usd"
    r = requests.get(url)
    try:
        return r.json()[symbol]['usd']
    except:
        return "n/a"

def format_market_summary():
    coins = {
        'bitcoin': 'BTC',
        'ethereum': 'ETH',
        'solana': 'SOL',
        'binancecoin': 'BNB',
        'ripple': 'XRP',
        'cardano': 'ADA'
    }
    msg = "üìä *–ö—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫ –Ω–∞ {}:*\n".format(datetime.datetime.now().strftime('%d.%m.%Y'))
    for key, label in coins.items():
        price = get_price(key)
        msg += f"{label}: ${price}\n"
    return msg

# üì¨ –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –∫—Ä–∏–ø—Ç–æ–±–æ—Ç ü§ñ\n–û—Ç–ø—Ä–∞–≤—å /btc, /eth, /alts –∏–ª–∏ –∑–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!")

@bot.message_handler(commands=['btc'])
def btc_price(message):
    price = get_price('bitcoin')
    bot.reply_to(message, f"BTC: ${price}")

@bot.message_handler(commands=['eth'])
def eth_price(message):
    price = get_price('ethereum')
    bot.reply_to(message, f"ETH: ${price}")

@bot.message_handler(commands=['alts'])
def alts_price(message):
    summary = format_market_summary()
    bot.reply_to(message, summary, parse_mode='Markdown')

# ü§ñ GPT-–æ—Ç–≤–µ—Ç—ã
@bot.message_handler(func=lambda message: True)
def gpt_reply(message):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ –¥–µ–ª—É."},
                {"role": "user", "content": message.text}
            ]
        )
        reply = response.choices[0].message.content
        bot.reply_to(message, reply)
    except Exception as e:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT: " + str(e))

# ‚è∞ –£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ 08:30 (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞)
def schedule_task():
    summary = format_market_summary()
    chat_id = '@sifka_channel'  # –∏–ª–∏ ID –≥—Ä—É–ø–ø—ã/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(chat_id, summary, parse_mode='Markdown')

def run_schedule():
    schedule.every().day.at("08:30").do(schedule_task)
    while True:
        schedule.run_pending()
        time.sleep(10)

threading.Thread(target=run_schedule).start()

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()
